# load packages
library(ggplot2)
library(tidyr)
library(pracma)
library(signal)
library(dplyr)
library(plotrix)
Parameters = c("hyperpol.slope",
"hyperpol.amplitude",
"hyperpol.duration",
"depol.slope",
"depol.amplitude",
"depol.duration",
"hyperpol.amplitude.2nd",
"bl.2nd" )
# Function for parameter finding
DataExtraction <- function(data, date){
output <- list()
time1 = data$Time
ToD = data$TimeOfDay
#determine which have info
if ( length( grep("L08",names(data)) ) == 1 ){
PlantNumber = names(data)[grep("L08",names(data)) ] %>% substr(8,8) %>% as.numeric()
} else if ( length( grep("L08",names(data)) ) > 1 ){
PlantNumber = c(1,2)
}
index = 1
# Extract info one plant at a time.
for( n in PlantNumber){
leaf1 = paste("L08.", n, sep = "")
leaf2 = paste("L13.",n, sep = "")
plant1 = data[, grep(leaf1, names(data)): grep(leaf2, names(data))] # pick the columns w/ the data
# extract info from L08 col (Stim,genotype)
# from cols 2,3 which have 08
info1 = names(plant1)[   grep("08", names(plant1))   ]
# extract from that all necessary info
stim1 = strsplit(info1,"_")[[1]][2] # separate by "_". save part with the stim. e.g. "L08.1CG"
stim1 <- substr(stim1,6,nchar(stim1))
genotype1 = strsplit(info1,"_")[[1]][3] # separate by "_". save part with the stim. e.g. "L08.1CG"
# rename (Time, L08(V), L13)(V)) and tidy, and convert to numeric corresponding cols.
plant1 = cbind(time1,plant1)
names(plant1)[1] <- "Seconds"
names(plant1)[   grep("08", names(plant1))   ] <- "L08"
names(plant1)[   grep("13", names(plant1))   ] <- "L13"
plant1 = gather(plant1, "Leaf", "V", 2:3)
plant1$plant = n
plant1$Seconds = as.numeric(plant1$Seconds)
plant1$`V` = as.numeric(plant1$`V`)*100
plant1$Genotype = genotype1
plant1$Stim = stim1
plant1$Date = date
plant1$DayTime = ToD
plant1$Plot = "No"
plant1 = list(plant1)
output <- append(output,plant1)
names(output[index]) <-  paste("plant",n,sep = "")
index = index+1
}
return(output)
}###  LabScribe into data frame. PlantNumber= 1 or 2 per trace (Should make it 4, for each electrode)
AmIDone <- function(file){
CheckTraces = read.csv(file)
pendingList = c()
if( nrow(  dplyr::filter(CheckTraces, Plot=="No" ))>0  ){
print( paste("You still need to analyse these plants for ",
file, ":", sep = "") )
pendingTraces = dplyr::filter(CheckTraces, Plot=="No" )
for(i in unique(pendingTraces$Date) ){
missingDates = i
ids = unique( pendingTraces$id[which(pendingTraces$Date==i)] )
print( paste(i,ids,sep = "-")  )
pendingList = append(pendingList,paste(i,ids,sep = "-") )
}
} else {
print( paste("You're done with", file, "!!!") )
}
return(c(pendingList))
}
calculateslope <- function(vector) {
slopetrace = NULL
for( i in 2:length(vector)){
slopei = vector[i]-vector[i-1]
slopetrace = append(slopetrace, slopei)
}
slopetrace = append(slopetrace, slopetrace[length(slopetrace)])
return(slopetrace)
}
findSWPvalues <- function(trace, plant){
### Set reference time 0 when stimulus is applied: either at the first F1 value or or at the first maximum value.
if(length( which( is.na(trace)) ) > 0 ){
stimFrames =   which( is.na(trace))
if( length( which( is.na(trace))) > 2 ) {
stimFrames =  which( is.na(trace))[c(1,3)]
}
# Pick the first NaN (or F1 in DayTime column) for plant 1, and the 3rd NaN for plant 2
if( plant == 1){
stimFrame = stimFrames[1] ### Determines the stimulus frame by finding the first NaN. Which is when the pedal is pressed.
}
if( plant == 2){
stimFrame =   stimFrames[length(stimFrames)]  ### Determines the -later- stimulus frame for plant 2
}
} else {
stimFrames =  c(90,95)
# Pick the first NaN (or F1 in DayTime column) for plant 1, and the 3rd NaN for plant 2
if( plant == 1){
stimFrame = stimFrames[1] ### Determines the stimulus frame by finding the first NaN. Which is when the pedal is pressed.
}
if( plant == 2){
stimFrame =   stimFrames[2]  ### Determines the -later- stimulus frame for plant 2
}
}
### Filter signal
trace[which(trace < -150)] = trace[1] # Make extreme values equal baseline. It's when the electrode looses contact.
# smooth with Savitzky-Golay filter.
# n is the amount of point befor/after the nth point to be averaged
# p is the filter order. Dont know what that is.
trace = sgolayfilt(na.omit(trace) , p = 1, n = 3)
# trace = na.omit(trace) ## if not filtering, just omit NaNs
# Check trace (for debugging)
plot(trace, type = "l")+
abline(v=stimFrame)
### Initial baseline
bl.1st = mean(trace[ 1:(stimFrame-2)]) # average from 0 to before stimFrame
### Find peak depolarization
maxDepol = min(   na.omit( trace[ stimFrame:length(trace) ] )   ) # find peak depol. It's extracellular recording, so depol goes to negative (this information os not needed I guess)
depolFrame = which(trace == maxDepol) # Find frame at maximum depol
### hyperpol.amplitude
### Find peak of first hyperpolarization between stimulus and depol peak
maxHyperpol = max(  na.omit(trace[ (stimFrame-10) : depolFrame ])   )
hyperpolFrame =  which(trace == maxHyperpol)# Find frame at maximum hyperpol
hyperpol.amplitude = maxHyperpol-bl.1st
### depol.amplitude
depol.amplitude = maxDepol - abs(maxHyperpol) # Calculate max depol from the peak of hyperpol rather than from the initial baseline
### minDepolrate frame
# find the peak slope at depol part of the trace
# focus on the chunk between max hyperpol and max depol
depolTrace = trace[hyperpolFrame:depolFrame] #trace[ (stimFrame+10) : depolFrame  ]
depoltrace.firstderivative = calculateslope(depolTrace)
depol.slope =  min(depoltrace.firstderivative)
halfmax.depol.frame = min( which(depoltrace.firstderivative == depol.slope) )+hyperpolFrame-stimFrame
# to find half max frame, substract the halfMax V from the trace and pick the closest to 0.
### max hyperpol rate
# focus on the chunk between max hyperpol and max depol
hyperpolTrace = trace[(hyperpolFrame-20) : hyperpolFrame] # checks the trace 20s before the peak hyperpol.
hyperpoltrace.firstderivative = calculateslope(hyperpolTrace)
hyperpol.slope = max(hyperpoltrace.firstderivative)
### Save time of max slope
depol.slope.frame = min( which(hyperpoltrace.firstderivative == hyperpol.slope) )+hyperpolFrame-20-stimFrame
### hyperpol.duration from max hyperpol slope to min depol slope
hyperpol.duration = halfmax.depol.frame - depol.slope.frame
### second baseline
### Find second baseline i.e. after repolarization
bl.2nd = mean(trace[   (length(trace)-60): length(trace)   ])
###hyperpol.amplitude.2nd
# focus on repolarization part of the trace
repolTrace = trace[(depolFrame+1):length(trace)]
maxRepol = max(repolTrace) # maximum repolarization
maxRepolframe = which(repolTrace == maxRepol)+depolFrame
hyperpol.amplitude.2nd = maxRepol-bl.2nd # Find hyperpolarization amplitude in the recovery phase
# former maxHyperpol2
### maxRepol/2 frame
halfRepol = maxRepol + ((maxDepol-maxRepol)/2) # bl.2nd + (maxDepol - bl.2nd)/2 #
halfmax.repol.frame =  max( which( abs(repolTrace-halfRepol) <= min(abs(repolTrace-halfRepol))+1 ) )   + depolFrame - stimFrame
### Depolarization duration
#Time from halfmax raise and decay
depol.duration = halfmax.repol.frame - halfmax.depol.frame
#return all these
SWPvalues = data.frame(
bl.1st,
maxDepol,
hyperpol.amplitude,
hyperpol.slope,
depol.slope.frame,
maxHyperpol,
halfmax.depol.frame,
depol.slope,
depol.amplitude,
halfmax.repol.frame,
maxRepol,
hyperpol.amplitude.2nd,
bl.2nd,
depol.duration,
hyperpol.duration,
stimFrame
)
return( list(trace, SWPvalues))
}
trimTrace <-function(trace, second){
trimFrame = which(trace$Seconds == second)
trace = trace[1:trimFrame,]
plot(trace$V, type="l")
return(trace)
}
plotAndAnalyze <- function(genotypeFile){
# Load file newly
ALLtraces = read.csv( genotypeFile )
# Load summary file if exists
if( file.exists( paste(savename,"Summary.csv",sep = "")) )  {
fTraceSummary = read.csv( paste(savename,"Summary.csv",sep = "") )
} else {
fTraceSummary = NULL
}
# start w/ emptying variables
Date = c()
Stim = c()
id = c()
Leaf = c()
#### filter to get to one single plant
subSet0 = dplyr::filter(ALLtraces,Plot == "No")
for (datei in unique(subSet0$Date)){ # pick one date
subSet1 = dplyr::filter(subSet0, Date == datei)
# create folder if it doesn't exist
if( dir.exists(paste( savename,"-",datei,sep = ""))==FALSE ){
dir.create(paste( savename,"-",datei,sep = ""))
}
for(stimi in unique(subSet1$Stim) ) { # pick one stimulus form
subSet2 = dplyr::filter(subSet1, Stim == stimi)
for(IDi in unique(subSet2$id) ) { # pick one id
subSet3 = dplyr::filter(subSet2, id == IDi)
for (leafi in unique(subSet3$Leaf) ){ # pick a leaf
# single trace to be analyzed
trace = dplyr::filter(subSet3, Leaf == leafi)
### Check trace to decide if needs trimming of final part
plot(trace$V, type="l")
# Trim or not (I think it needs more explanation why we should trim traces)
answer <- readline (prompt="Trim trace? Second+ENTER, just ENTER to skip trimming, or >n< for skipping & erasing trace  ")
if(nchar(answer)>0){
if(answer == "n"){
print("Trace not saved")
#### Erase the trace is not saved!
traceIndeces = which(ALLtraces$Date == datei &
ALLtraces$Stim==stimi &
ALLtraces$id == IDi &
ALLtraces$Leaf == leafi )
ALLtraces = ALLtraces[-traceIndeces,]
write.csv(ALLtraces, paste(savename,".csv",sep = ""), row.names = FALSE)
traceIndeces = c()
break # this should go to the next leaf
} else if( !is.na( as.numeric(answer) )) {
trace = trimTrace(trace, answer)
} else {
print("No valid input ")
answer <- readline (prompt="Trim trace? Second+ENTER, just ENTER to skip trimming, or >n< for skipping & erasing trace  ")
}
}
### FUNCTION TO CALCUATE PARAMETERS
SWPanalysis = findSWPvalues(trace$V, trace$plant[1])
trace = na.omit(trace)
# Save trace and values independently
trace$V = SWPanalysis[[1]]
SWPvalues = SWPanalysis[[2]]
trace$Seconds = trace$Seconds - SWPvalues$stimFrame  # Make time at stimulus frame = 0
### PLOT!
plotTitle = paste(IDi,leafi, sep = ".")
plot(x = trace$Seconds, y = trace$V, type = "l", main = plotTitle, ylim=c(-100,40) ) +
abline(h = SWPvalues$bl.1st, col="black", lty = 2) +
abline(v = SWPvalues$halfmax.depol.frame, col="red") +
abline(v = SWPvalues$depol.slope.frame, col="red") +
abline(v = SWPvalues$halfmax.repol.frame, col="green") +
abline(h = SWPvalues$maxDepol, col = "red") +
abline(h = SWPvalues$maxHyperpol, col = "blue") +
abline(h = SWPvalues$maxRepol, col = "blue") +
abline(h = SWPvalues$bl.2nd, col="green", lty = 2) +
abline(v = 0, col="black", lty = 2)
print(paste(datei,IDi,stimi,leafi,sep = "-"))
print(SWPvalues)
#### Save or not
if(abs(SWPvalues$depol.amplitude) < 10){
answer <- readline (prompt="NO RESPONSE! save as failed trace? [y];[n]    ")
if(answer == "y"){
SWPvalues$depol.duration = NA
plotTitle = paste("FAIL",plotTitle, sep = "-")
}
} else {
answer <- readline (prompt="Press [y] to save; [n] to skip    ")
}
while ( is.null(answer)==FALSE ){ #answer != "y" || answer != "n"
traceIndeces = which(ALLtraces$Date == datei &
ALLtraces$Stim==stimi &
ALLtraces$id == IDi &
ALLtraces$Leaf == leafi )
if (answer == "y") {
# put in dataframe
Date = datei
Stim = stimi
id = IDi
Leaf = leafi
# save data
fTraceSummary = rbind(fTraceSummary, cbind(Date,Stim,id,Leaf,SWPvalues) )
## get rid of infinite values
for(i in 5:ncol(fTraceSummary)){
fTraceSummary[which(fTraceSummary[,i] == Inf),i] = NaN
}
write.csv(fTraceSummary, paste(savename,"Summary.csv",sep = ""), row.names = FALSE)
# save plot
pdf(file = paste( savename,"-",datei,"/", plotTitle, ".pdf" , sep = "") )
plot(x = trace$Seconds, y = trace$V, type = "l", main = plotTitle, ylim=c(-100,40)) +
abline(h = SWPvalues$bl.1st, col="black", lty = 2) +
abline(v = SWPvalues$halfmax.depol.frame, col="red") +
abline(v = SWPvalues$depol.slope.frame, col="red") +
abline(v = SWPvalues$halfmax.repol.frame, col="green") +
abline(h = SWPvalues$maxDepol, col = "red") +
abline(h = SWPvalues$maxHyperpol, col = "blue") +
abline(h = SWPvalues$maxRepol, col = "blue") +
abline(h = SWPvalues$bl.2nd, col="green", lty = 2) +
abline(v = 0, col="black", lty = 2) +
xlab = "s" +
ylab = "mV"
dev.off()
# update database of traces. label the plotted as plotted.(label the plots?)
# Set plot status to YES
ALLtraces$Plot[traceIndeces] = "Yes"
write.csv(ALLtraces, paste(savename,".csv",sep = ""), row.names = FALSE)
break
}
else if (answer == "n") {
print("Trace not saved")
#### borrar del archivo si no se guarda!
ALLtraces = ALLtraces[-traceIndeces,]
write.csv(ALLtraces, paste(savename,".csv",sep = ""), row.names = FALSE)
traceIndeces = c()
break
}
else {
print("Not valid input")
answer <- readline (prompt="Press [y] to save; [n] to skip")
}
}
}
}
}
}
return(fTraceSummary)
}
home = getwd()
print("Continue with step 2.1 or where you left")
foldername = "msl10-output"  # Replace the text in "" with the name you want your folder to have. example: "Col-0-01.01.2000"
# What is your control group?
controlgroup = "Col0" #
#####
batchFolder = paste(home,foldername,sep="/")
print("Continue with step 2.2") ###
## Load file names
setwd(home)
initialFiles = list.files()
dir.create(batchFolder)
# Loop through all the date-named folder containing the raw data. Saves and prints all the traces found.
files = c()
done = 0
for (f in list.files() ){
################ Check if it's a folder with content
if( length(list.files(f)) != 0 ){
files = list.files(f)[  grep(".txt",  list.files(f))  ]
}
else if(length(list.files(f)) == 0) next # skip to next file if doesn't have content
################ Loop through all files in folder
for (i in files){
print( paste(f,i,sep="_") )
setwd(paste(home,f,sep = "/")) # go into folder with the files to extract
traceList = DataExtraction( read.delim(i), f )# load .txt file returns list with all plants recorded in file.
# Save traces to files. Sort by genotype -in another folder-
for ( p in 1:length(traceList) ){ # loop through plants in list of traces
setwd(batchFolder) # go to dir specific to that batch
# if genotype file of plant "p" exists, open it
findFile = paste(traceList[[p]]$Genotype[1], ".csv", sep = "")
if ( length( grep( findFile , list.files( ), fixed = TRUE)) == 1 ){ # looks for EXACT match of genotype.csv i.e., Col0 =! Col0.1
genotypeData = read.csv( list.files(batchFolder)[ grep(findFile, list.files(batchFolder), fixed = TRUE )] )
# create new, consecutive id number for plants recorded the same date.
if( length(grep(f, genotypeData$Date)) > 0 ){ # if genotype exists and also date
traceList[[p]]$id = as.numeric(genotypeData %>% dplyr::filter(Date == f) %>% dplyr::summarise(max(id)) + 1 )
}
# if the genotype exists but not the date
else if(length(grep(f, genotypeData$Date)) == 0){
traceList[[p]]$id = 1
}
genotypeData = rbind(genotypeData, traceList[[p]]) # append plant "p" to genotype database
}
# else, no genotype file yet
if ( length( grep( paste(traceList[[p]]$Genotype[1], ".csv", sep = ""), list.files( ), fixed = TRUE)) == 0 ){  # looks for EXACT match of genotype. i.e., Col0 =! Col0.1
traceList[[p]]$id = 1
genotypeData = traceList[[p]] # create new file
}
# Down sample to 1Hz if the traces were saved in 10Hz
newIndeces = sort(
c( which(genotypeData$Seconds%%1==0), which(is.na(genotypeData$Seconds)==TRUE) ),
decreasing = FALSE)
genotypeData = genotypeData[newIndeces,]
# save i
write.csv(genotypeData, paste( batchFolder,"/",traceList[[p]]$Genotype[1],".csv",sep = "" ), row.names = FALSE )
print(paste( f, i, traceList[[p]]$Genotype[1], traceList[[p]]$DayTime[1], sep = " - ") )
done = 1
} # finish saving all traces "p" in file "i"
} # finish opening all files in folder "f"
setwd(home)
}
if(done == 1){
print("Success! continue with step 3.1")
} else {
print("No folder with .txt files recognized. Put data in home folder")
}
home
## Load file names
setwd(home)
initialFiles = list.files()
dir.create(batchFolder)
# Loop through all the date-named folder containing the raw data. Saves and prints all the traces found.
files = c()
done = 0
for (f in list.files() ){
################ Check if it's a folder with content
if( length(list.files(f)) != 0 ){
files = list.files(f)[  grep(".txt",  list.files(f))  ]
}
else if(length(list.files(f)) == 0) next # skip to next file if doesn't have content
################ Loop through all files in folder
for (i in files){
print( paste(f,i,sep="_") )
setwd(paste(home,f,sep = "/")) # go into folder with the files to extract
traceList = DataExtraction( read.delim(i), f )# load .txt file returns list with all plants recorded in file.
# Save traces to files. Sort by genotype -in another folder-
for ( p in 1:length(traceList) ){ # loop through plants in list of traces
setwd(batchFolder) # go to dir specific to that batch
# if genotype file of plant "p" exists, open it
findFile = paste(traceList[[p]]$Genotype[1], ".csv", sep = "")
if ( length( grep( findFile , list.files( ), fixed = TRUE)) == 1 ){ # looks for EXACT match of genotype.csv i.e., Col0 =! Col0.1
genotypeData = read.csv( list.files(batchFolder)[ grep(findFile, list.files(batchFolder), fixed = TRUE )] )
# create new, consecutive id number for plants recorded the same date.
if( length(grep(f, genotypeData$Date)) > 0 ){ # if genotype exists and also date
traceList[[p]]$id = as.numeric(genotypeData %>% dplyr::filter(Date == f) %>% dplyr::summarise(max(id)) + 1 )
}
# if the genotype exists but not the date
else if(length(grep(f, genotypeData$Date)) == 0){
traceList[[p]]$id = 1
}
genotypeData = rbind(genotypeData, traceList[[p]]) # append plant "p" to genotype database
}
# else, no genotype file yet
if ( length( grep( paste(traceList[[p]]$Genotype[1], ".csv", sep = ""), list.files( ), fixed = TRUE)) == 0 ){  # looks for EXACT match of genotype. i.e., Col0 =! Col0.1
traceList[[p]]$id = 1
genotypeData = traceList[[p]] # create new file
}
# Down sample to 1Hz if the traces were saved in 10Hz
newIndeces = sort(
c( which(genotypeData$Seconds%%1==0), which(is.na(genotypeData$Seconds)==TRUE) ),
decreasing = FALSE)
genotypeData = genotypeData[newIndeces,]
# save i
write.csv(genotypeData, paste( batchFolder,"/",traceList[[p]]$Genotype[1],".csv",sep = "" ), row.names = FALSE )
print(paste( f, i, traceList[[p]]$Genotype[1], traceList[[p]]$DayTime[1], sep = " - ") )
done = 1
} # finish saving all traces "p" in file "i"
} # finish opening all files in folder "f"
setwd(home)
}
if(done == 1){
print("Success! continue with step 3.1")
} else {
print("No folder with .txt files recognized. Put data in home folder")
}
home
list.files()
